{
  "conceptual": "\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"3\">Today I spent some time on improving and polishing what I built so far.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"5\">First I set up sound. EZ uses Fmod, so <a href=\"~/pages/docs/sound/fmod-overview.md\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"5\">following the documentation</a> and my own tutorial video, I created a new Fmod Studio project, downloaded a couple of sounds from &lt;freesound.org&gt; and added sounds for footsteps, the player's projectile and the trap.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"7\">Footsteps for the player are quite easy, because the <a href=\"~/pages/docs/physics/jolt/special/jolt-character-controller.md\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"7\">character controller</a> already supports this through <a href=\"~/pages/docs/materials/surfaces.md\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"7\">surface interactions</a>. Basically, whenever something needs to interact with a surface, for example a bullet hitting a wall, we can easily spawn a <em sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"7\">surface interaction</em>. Usually polygons are linked to a surface and the surface acts as a lookup table. So if I walk over a stone surface and I want to spawn a <em sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"7\">footstep</em> interaction, the stone surface defines which prefab to use, and if I walk over a metal surface, it may define a different prefab to use.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"9\"><img src=\"~/pages/samples/monster-attack/media/devlog3/ma-dl3-image1.png\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"9\" alt=\"Footstep config\"></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"11\">Surfaces are hierarchical, so both stone and metal surfaces are built on top of the <em sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"11\">Default</em> surface, and as long as they don't define an override, the value from the <em sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"11\">Default</em> surface is used.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"13\">Therefore, on the character controller, all that we need to define is the name of the surface interaction, and how quickly those should be spawned when walking or running.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"15\"><img src=\"~/pages/samples/monster-attack/media/devlog3/ma-dl3-image2.png\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"15\" alt=\"Footstep config\"></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"17\">The same system is used by the <a href=\"~/pages/docs/gameplay/projectile-component.md\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"17\">projectile</a> to spawn a prefab when it hits something.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"19\">For my trap, all I needed to add was a sound event to the <em sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"19\">Loaded</em> state, so that it makes a mechanical noise when it is ready.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"21\"><img src=\"~/pages/samples/monster-attack/media/devlog3/ma-dl3-image3.png\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"21\" alt=\"Trap Sound\"></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"23\">The next thing I did, was to add code to the player component, so that the player can place traps. This is all done in C++.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"25\">EZ has an <a href=\"~/pages/docs/runtime/configuration/interfaces.md\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"25\">abstract interface</a> <code sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"25\">ezPhysicsWorldModuleInterface</code> which you can query from the <a href=\"~/pages/docs/runtime/world/world-overview.md\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"25\">world</a>, that gives you access to things like raycasts. To get this interface, you call</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"27\"><code sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"27\">ezPhysicsWorldModuleInterface* pPhysics = GetOwner()-&gt;GetWorld()-&gt;GetModule&lt;ezPhysicsWorldModuleInterface&gt;();</code></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"29\">This is probably one of the most important such interfaces, since physics queries are so ubiquitously useful for all sorts of game mechanics.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"31\">For now I simply use this to check where the player is looking. Meaning, I shoot a ray through the camera like this:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"33\">ezPhysicsCastResult result;\npPhysics-&gt;Raycast(result, pCameraObject-&gt;GetGlobalPosition(), pCameraObject-&gt;GetGlobalDirForwards(), 10.0f, params);\n</code></pre>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"38\">Now I have the point that the player is looking at. The next step is to validate, that one can place a trap there. For now I only do very simply position snapping and some rotation, I don't yet prevent the player from placing traps where they don't belong.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"40\">Of course, while in trap placement mode you want to have a preview how things would look like, so I built a copy of my trap prefab, that has no functionality, and I add that to the scene (and move it around) to show where the trap would end up. At some point this should probably also use a <a href=\"~/pages/docs/graphics/shaders/shaders-overview.md\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"40\">custom shader</a> for a nice &quot;preview effect&quot;, and some sounds when placing traps for better feedback.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"42\"><video src=\"~/pages/samples/monster-attack/media/devlog3/ma-dl3-TrapPlacement.mp4\" width=600 controls></video></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"44\">At some point I noticed that when a monster dies, it doesn't dissappear and a lot of bodies where piling up. So now the }<em sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"44\">monster component</em> simply puts itself into a queue when it starts playing the <em sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"44\">die</em> animation to keep track of dead bodies, and I delete the oldest one when I have more than 20.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"46\">Finally, I wanted to have a second trap. My favourite trap in <em sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"46\">Orcs Must Die</em> is the one that shoots arrows out of a wall. From its logic it's very similar to the spike trap, so I copied and adjusted it. This is what it looks like:</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"48\"><img src=\"~/pages/samples/monster-attack/media/devlog3/ma-dl3-image4.png\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"48\" alt=\"Arrow Trap\"></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"50\">I've added a <em sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"50\">Dart</em> <a href=\"~/pages/docs/gameplay/projectile-component.md\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"50\">projectile</a> prefab and this trap simply uses 24 <a href=\"~/pages/docs/gameplay/spawn-component.md\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"50\">spawn components</a> to shoot a lot of those. This is it in action:</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"52\"><video src=\"~/pages/samples/monster-attack/media/devlog3/ma-dl3-ArrowTrap.mp4\" width=600 controls></video></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"54\">However, I wanted the trap to shoot arrows three times in quick succession. Because that's way cooler. Turns out, this was absolutely trivial to do with the state machine. All I needed to do, was to copy two of the states a few times and set up a short time delay as transitions:</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"56\"><img src=\"~/pages/samples/monster-attack/media/devlog3/ma-dl3-image5.png\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"56\" alt=\"Arrow Trap\"></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"58\">And now it behaves like this:</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"60\"><video src=\"~/pages/samples/monster-attack/media/devlog3/ma-dl3-ArrowTrap2.mp4\" width=600 controls></video></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"62\">And together they already create quite some mayhem:</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"64\"><video src=\"~/pages/samples/monster-attack/media/devlog3/ma-dl3-Gameplay.mp4\" width=600 controls></video></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"66\">Finally, in game,  it looks and sounds like this:</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"68\"><video src=\"~/pages/samples/monster-attack/media/devlog3/ma-dl3-Gameplay2.mp4\" width=600 controls></video></p>\n<h2 id=\"see-also\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"70\">See Also</h2>\n<ul sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"72\">\n<li sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"72\"><a href=\"~/pages/samples/monster-attack/monster-attack.md\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"72\">Monster Attack Sample</a></li>\n</ul>\n",
  "type": "Conceptual",
  "source": {
    "remote": {
      "path": "pages/samples/monster-attack/devlog-3.md",
      "branch": "main",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0,
    "endLine": 0
  },
  "path": "pages/samples/monster-attack/devlog-3.md",
  "documentation": {
    "remote": {
      "path": "pages/samples/monster-attack/devlog-3.md",
      "branch": "main",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0,
    "endLine": 0
  },
  "_appFaviconPath": "assets/images/favicon.svg",
  "_appFooter": "Hello",
  "_appLogoPath": "assets/images/EZ-text.svg",
  "_appName": "ezEngine",
  "_appTitle": "ezEngine",
  "_enableGoogleAnalytics": true,
  "_enableNewTab": true,
  "_enableSearch": true,
  "_gitContribute": {
    "repo": "https://github.com/ezEngine/docs-src",
    "branch": "main"
  },
  "_systemKeys": [
    "conceptual",
    "type",
    "source",
    "path",
    "documentation",
    "title",
    "rawTitle",
    "wordCount"
  ],
  "rawTitle": "<h1 id=\"ma-devlog-3---sound\" sourcefile=\"pages/samples/monster-attack/devlog-3.md\" sourcestartlinenumber=\"1\">MA Devlog 3 - Sound</h1>",
  "title": "MA Devlog 3 - Sound",
  "wordCount": 701,
  "_key": "pages/samples/monster-attack/devlog-3.md",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../../toc.html",
  "_path": "pages/samples/monster-attack/devlog-3.html",
  "_rel": "../../../",
  "_tocKey": "~/pages/samples/toc.md",
  "_tocPath": "pages/samples/toc.html",
  "_tocRel": "../toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  },
  "_disableToc": false,
  "docurl": "https://github.com/ezEngine/docs-src/blob/main/pages/samples/monster-attack/devlog-3.md/#L1"
}