{
  "conceptual": "\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"3\">So today was all about getting my first trap working. Here is the result:</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"5\"><video src=\"~/pages/samples/monster-attack/media/devlog2/ma-dl2-Spike_Trap.mp4\" width=\"600\" controls=\"\"></video></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"7\">The most flexible way to do these things, is to just use <a href=\"~/pages/docs/custom-code/cpp/custom-cpp-component.md\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"7\">custom C++ components</a> for everything. However, I want to test out our other infrastructure as well, for example the new <a href=\"~/pages/docs/custom-code/visual-script/visual-script-overview.md\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"7\">visual scripting</a>, the <a href=\"~/pages/docs/custom-code/game-logic/state-machine-asset.md\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"7\">state machines</a>, and so on, so the goal is to prefer those, and only use C++ for the things that really need it.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"9\">At the moment I only have two custom C++ components, one for the player logic and one for the monsters. The former mostly does <a href=\"~/pages/docs/input/input-overview.md\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"9\">input handling</a> and forwarding to the <a href=\"~/pages/docs/physics/jolt/special/jolt-character-controller.md\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"9\">character controller</a>, the latter mainly does the path finding and steering.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"11\">So today I had to figure out how to build my first trap.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"13\">If I were (or had) an artist, I would use an <a href=\"~/pages/docs/animation/skeletal-animation/animated-mesh-asset.md\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"13\">animated mesh</a> with multiple <a href=\"~/pages/docs/animation/skeletal-animation/animation-clip-asset.md\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"13\">animations</a> for the different trap states. However, I only have two <a href=\"~/pages/docs/graphics/meshes/mesh-asset.md\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"13\">static meshes</a>, one with spikes, one without, and I really want to make things work with the assets as I have them. So I needed a way to do the visuals without animations.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"15\">Here is what it looks like in a close up:</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"17\"><video src=\"~/pages/samples/monster-attack/media/devlog2/ma-dl2-SpikeTrapAnim.mp4\" width=\"600\" controls=\"\"></video></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"19\">The trap has four states, therefore I built a <a href=\"~/pages/docs/custom-code/game-logic/state-machine-asset.md\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"19\">state machine</a>.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"21\"><img src=\"~/pages/samples/monster-attack/media/devlog2/ma-dl2-image1.png\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"21\" alt=\"Spike Trap States\"></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"23\">In the <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"23\">Dormant</em> state it does nothing. This is the state where the trap is not dangerous. It takes a second and then transitions into the <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"23\">Loaded</em> state.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"25\">In the loaded state, the spikes show up and peak through the bottom. Now when a creature walks over it, the trap enters the <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"25\">Firing</em> state where it makes damage.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"27\">After a short time, it enters the <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"27\">Retracting</em> state, where the spikes move down and then it starts over.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"29\">Again, there are different ways how you could achieve the animations and the behavior, but I wanted to use as much existing functionality as possible. For each <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"29\">State</em> in the state machine you select what code it should run. And one existing type of state is the <strong sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"29\">Switch Object</strong> state. What this will do, is it simply activates / deactivates game objects in your object structure. So you could for example use this to enable a particle effect node and thus make your object <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"29\">burning</em> or switch to a different mesh object, so that it looks broken.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"31\">For example the <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"31\">Retracting</em> state deactivates all objects under the <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"31\">States</em> group, but enables the <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"31\">Retracting</em> object:</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"33\"><img src=\"~/pages/samples/monster-attack/media/devlog2/ma-dl2-image2.png\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"33\" alt=\"Retracting State\"></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"35\">My trap prefab looks like this:</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"37\"><img src=\"~/pages/samples/monster-attack/media/devlog2/ma-dl2-image3.png\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"37\" alt=\"Trap Layout\"></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"39\">On the root node, there is my state machine component.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"41\">Directly attached to it are the base mesh (second to last node) and a trigger (last node). Inside the <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"41\">States</em> group there are the four different groups that represent the different states. For example, the <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"41\">Dormat</em> group is just empty.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"43\">The three other groups add the spiky mesh and the <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"43\">Firing</em> group additionally adds area damage.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"45\">Now as I said, for the animation one should use a skinned mesh and just play animations, but to achieve the up/down movement without this, I used the <a href=\"~/pages/docs/animation/property-animation/slider-component.md\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"45\">Slider component</a>.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"47\">Also I added a new <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"47\">Reset Transform</em> component, to make the sub-objects move back into place each time. So now the <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"47\">Retracting</em> and <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"47\">Firing</em> group uses these components:</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"49\"><img src=\"~/pages/samples/monster-attack/media/devlog2/ma-dl2-image4.png\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"49\" alt=\"Components\"></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"51\">All this gives you the visuals.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"53\">Now on the state machine you have <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"53\">transitions</em> (the arrows between the states). For each transition you again have to choose the &quot;type&quot;. The transition type determines the logic to decide whether the transition should be taken or not. So you can have complex logic here.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"55\">To start, I just used the <strong sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"55\">Timeout</strong> transition, which would just cycle through the states with a 1 second delay.\nThis is fine for all transitions, except for the one from <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"56\">Loaded</em> to <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"56\">Firing</em>. Here we only want to transition when a creature walks into the trap.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"58\">To detect this, I decided to use a <a href=\"~/pages/docs/physics/jolt/actors/jolt-trigger-component.md\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"58\">physics trigger</a>.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"60\">First this meant that my creatures need to have some kind of physics representation, which the physics trigger can detect at all. So I added a kinematic capsule shape, which just moves along with my creature (they currently don't use a character controller).</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"62\"><img src=\"~/pages/samples/monster-attack/media/devlog2/ma-dl2-image5.png\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"62\" alt=\"Creature\"></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"64\">Now whenever the creature walks into a trap, the trigger in my trap prefab will fire an event. However, so far this event won't have any effect.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"66\">I need to hook up the event from the trigger to my state machine. And this is what <a href=\"~/pages/docs/custom-code/visual-script/visual-script-overview.md\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"66\">visual scripts</a> are really good for.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"68\">On the root node of my trap, I added a <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"68\">Script Component</em>:</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"70\"><img src=\"~/pages/samples/monster-attack/media/devlog2/ma-dl2-image6.png\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"70\" alt=\"Script component\"></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"72\">The script is quite trivial:</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"74\"><img src=\"~/pages/samples/monster-attack/media/devlog2/ma-dl2-image7.png\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"74\" alt=\"Script\"></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"76\">Whenever the trigger fires, the script's <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"76\">OnMsgTriggerTriggered</em> node gets executed. We then switch over the state and only react to <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"76\">Activated</em> events. If so, we call <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"76\">FireTransitionEvent</em> on the sibling <a href=\"~/pages/docs/custom-code/game-logic/state-machine-component.md\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"76\">StateMachineComponent</a> and tell it to <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"76\">Fire</em>.</p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"78\"><img src=\"~/pages/samples/monster-attack/media/devlog2/ma-dl2-image8.png\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"78\" alt=\"SM transitions\"></p>\n<p sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"80\">So now we have it. When a creature walks into the trigger, the visual script gets the physics trigger event, forwards that to the state machine and when the state machine happens to be in the <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"80\">Loaded</em> state, it will transition into the <em sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"80\">Firing</em> state. The state machine then changes which sub-objects in the trap are active, which in turn starts the spike movement and applies area damage to anything close by.</p>\n<h2 id=\"see-also\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"82\">See Also</h2>\n<ul sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"84\">\n<li sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"84\"><a href=\"~/pages/samples/monster-attack/monster-attack.md\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"84\">Monster Attack Sample</a></li>\n</ul>\n",
  "type": "Conceptual",
  "source": {
    "remote": {
      "path": "pages/samples/monster-attack/devlog-2.md",
      "branch": "main",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0.0,
    "endLine": 0.0
  },
  "path": "pages/samples/monster-attack/devlog-2.md",
  "documentation": {
    "remote": {
      "path": "pages/samples/monster-attack/devlog-2.md",
      "branch": "main",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0.0,
    "endLine": 0.0
  },
  "_appFaviconPath": "assets/images/favicon.svg",
  "_appFooter": "Hello",
  "_appLogoPath": "assets/images/EZ-text.svg",
  "_appName": "ezEngine",
  "_appTitle": "ezEngine",
  "_enableGoogleAnalytics": true,
  "_enableNewTab": true,
  "_enableSearch": true,
  "_gitContribute": {
    "repo": "https://github.com/ezEngine/docs-src",
    "branch": "main"
  },
  "_systemKeys": [
    "conceptual",
    "type",
    "source",
    "path",
    "documentation",
    "title",
    "rawTitle",
    "wordCount"
  ],
  "rawTitle": "<h1 id=\"ma-devlog-2---spike-trap\" sourcefile=\"pages/samples/monster-attack/devlog-2.md\" sourcestartlinenumber=\"1\">MA Devlog 2 - Spike Trap</h1>",
  "title": "MA Devlog 2 - Spike Trap",
  "wordCount": 860.0,
  "_key": "pages/samples/monster-attack/devlog-2.md",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../../toc.html",
  "_path": "pages/samples/monster-attack/devlog-2.html",
  "_rel": "../../../",
  "_tocKey": "~/pages/samples/toc.md",
  "_tocPath": "pages/samples/toc.html",
  "_tocRel": "../toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  },
  "_disableToc": false,
  "docurl": "https://github.com/ezEngine/docs-src/blob/main/pages/samples/monster-attack/devlog-2.md/#L1"
}