{
  "conceptual": "\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"3\">This document gives an overview of the functionality that ezEngine provides and how the most important libraries are structured.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"5\">ezEngine is divided into multiple libraries that provide different functionality.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"7\">The most basic and also largest library is <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"7\">Foundation</strong>. It contains all the basic functionality on which the rest of the engine is built. <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"7\">Foundation</strong> is meant to be application agnostic. All its features can be used in any kind of application. Most of the platform abstractions are implemented here.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"9\">Foundation itself only depends on various third-party libraries.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"11\">The <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"11\">Core</strong> library is built on top of Foundation. This library contains engine specific features, such as the Game Object system. <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"11\">Core</strong> is where most of the actual engine infrastructure is implemented.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"13\"><strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"13\">System</strong> is the library that is supposed to contain all the high-level platform specific code that might be difficult to abstract. Currently this mostly contains window creation code.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"15\">The <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"15\">TestFramework</strong> library implements code to manage our unit-tests. You can ignore this entirely.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"17\"><strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"17\">GameEngine</strong> builds on top of all the other libraries, including the rendering code. It contains the most high-level code for a game engine, such as AI and Animation, <a href=\"~/pages/docs/runtime/application/application.md\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"17\">ezGameApplication</a> and <a href=\"~/pages/docs/runtime/application/game-state.md\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"17\">ezGameState</a>, which are the basis for any game application built with EZ, the prefab system, the visual scripting and much more.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"19\">In general the most interesting libraries to look at are <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"19\">Foundation</strong>, <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"19\">Core</strong> and <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"19\">GameEngine</strong>.</p>\n<h2 id=\"library-overview-foundation\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"21\">Library Overview: Foundation</h2>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"23\">The Foundation library contains all the 'low-level' code that is used throughout the engine.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"25\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"25\">Foundation\\Containers</strong> you will find different types of container classes. These are heavily influenced by the STL, so a lot might look familiar. The most interesting class one should have a look at is <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"25\">ezHybridArray</code>.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"27\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"27\">Foundation\\Strings</strong> you will find all the string classes and utilities. ezEngine works with Utf-8 strings everywhere, which makes some things a bit more complicated, but these string classes make it pretty easy. There are utility classes to work with raw C strings and higher-level string classes to create and store strings efficiently.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">Foundation\\Math</strong> you will find lots of math classes, e.g. classes to do vector arithmetic (<code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">ezVec3</code>, <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">ezMat4</code>, <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">ezQuat</code>, <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">ezPlane</code>, etc.), classes to work with colors (<code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">ezColor</code>, <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">ezColorGammaUB</code>, <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">ezColorLinear16f</code>), classes to work with bounding volumes (<code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">ezBoundingBox</code>, <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">ezBoundingSphere</code>) and do culling (<code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">ezFrustum</code>), utility functions for intersection tests (<code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">ezIntersectionUtils</code>) and a class to work with angles efficiently (<code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">ezAngle</code>). There is even an implementation for a fixed point type (<code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"29\">ezFixedPoint</code>).</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"31\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"31\">Foundation\\Time</strong> you will find <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"31\">ezTime</code>, which handles simple time values. Using <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"31\">ezTime::Now()</code> you can access the current application time. To handle game time (e.g. for slow-motion, etc.) use <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"31\">ezClock</code>. For profiling or timing <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"31\">ezStopwatch</code> is available. And finally for system-independent timestamps, which might be useful when working with file modification times, <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"31\">ezTimestamp</code> and <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"31\">ezDateTime</code> are provided.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"33\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"33\">Foundation\\Threading</strong> you will find functionality that is useful for threading. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"33\">ezAtomicInteger</code> provides lock-free integer values. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"33\">ezLock</code> and <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"33\">ezMutex</code> implement the standard mechanisms for working with critical sections. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"33\">ezThread</code> is a platform independent implementation for threads and <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"33\">ezThreadSignal</code> allows to send signals to other threads. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"33\">ezThreadUtils</code> provides some of the low-level threading functions, such as <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"33\">ezThreadUtils::Sleep()</code>.\nHowever, before you go ahead and create your own threads, you should have a look at <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"34\">ezTaskSystem</code>, which is a thread-pool implementation that efficiently distributes tasks across multiple worker threads. It supports dependencies across tasks, different priorities, waiting/blocking for unfinished tasks, task canceling and load-balancing when tasks run over multiple frames. There should be only very few situations where a task is not good enough and a custom thread is necessary.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"36\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"36\">Foundation\\Logging</strong> you will find <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"36\">ezLog</code>, the central class to output log information. There are various ways logging information can be output. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"36\">ezLogWriter::HTML</code> allows to write the data to an HTML file, <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"36\">ezLogWriter::Console</code> and <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"36\">ezLogWriter::VisualStudio</code> output the data to different console windows. Additionally the <a href=\"~/pages/docs/tools/inspector.md\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"36\">ezInspector</a> tool will display all logged data as well. The logging system is extremely useful to get an insight into what your application is doing and what might be going wrong, so we suggest setting this up early and using it to log most of what your application is doing.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"38\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"38\">Foundation\\Algorithm</strong> you will find some useful algorithms, mostly for sorting, searching and hashing.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"40\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"40\">Foundation\\Basics</strong> you can find a lot of platform specific code, most of which might not be very interesting. You will also find <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"40\">EZ_ASSERT</code> which you should be using frequently.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"42\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"42\">Foundation\\Basics\\Types</strong> you will find some fundamental types that are used frequently in EZ. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"42\">ezDelegate</code> is often used for callbacks. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"42\">ezEnum</code> is used for type-safe enum types and <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"42\">ezBitflags</code> is used for type-safe and easy to use bitflags. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"42\">ezArrayPtr</code> is a 'fat pointer' that stores the start and length of an array. Finally <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"42\">ezVariant</code> is a type that can store different types of data (float, int, string, vector, etc.) and knows which type it has stored. It can do conversions between related types and is often used in message passing.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"44\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"44\">Foundation\\CodeUtils</strong> you can find utilities to work with code or text, such as <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"44\">ezTokenizer</code>. You will also find a full implementation of a C preprocessor (<code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"44\">ezPreprocessor</code>).</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"46\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"46\">Foundation\\Communication</strong> you can find functionality to communicate with other code. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"46\">ezEvent</code> is a frequently used class to raise events and thus inform other code of changes. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"46\">ezMessage</code> is used for message passing, which is quite often used with the game object system (which you will find in the <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"46\">Core</strong> library). <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"46\">ezTelemetry</code> is a system to broadcast information from the running application to other applications, usually tools for introspection, such as <a href=\"~/pages/docs/tools/inspector.md\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"46\">ezInspector</a>.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"48\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"48\">Foundation\\Configuration</strong> you will find tools to configure the application. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"48\">ezStartup</code> is a system to (de-)initialize different subsystems in your code in the right order. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"48\">ezPlugin</code> is used when you want to extend your application using plugin DLLs dynamically at runtime. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"48\">ezStartup</code> helps with this as well.\n<code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"49\">ezCVar</code> is a 'configuration variable' that allows to easily change the state of the running application. Its state can be stored on disk and it can be modified either through an <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"49\">ezConsole</code> or remotely through ezInspector. This allows to have lots of 'debug modes' that can be enabled on demand without recompilation or complicated integration into the input handling.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"51\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"51\">Foundation\\Utilities</strong> you will find some utility functionality, such as <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"51\">ezCommandLineUtils</code> for command-line argument parsing, <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"51\">ezConversionUtils</code> for string / number conversions and <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"51\">ezStats</code> for broadcasting the state of some internal code, which is useful for debugging game code.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"53\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"53\">Foundation\\IO</strong> you will find lots of functionality for reading and writing data.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"55\"><code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"55\">ezStreamReader</code> and <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"55\">ezStreamWriter</code> are the interfaces for all IO operations. Derived from these classes you will find <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"55\">ezMemoryStreamReader</code> / <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"55\">ezMemoryStreamWriter</code> for working with data in-memory. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"55\">ezCompressedStreamReaderZstd</code> and <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"55\">ezCompressedStreamWriterZstd</code> allow to zip and unzip data and <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"55\">ezChunkStreamWriter</code> / <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"55\">ezChunkStreamReader</code> implement a 'chunked' format that can be used for building file formats that another application may not fully understand.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"57\"><code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"57\">ezOSFile</code> is the low-level file abstraction, in most cases you should not need to work with this. Instead prefer <a href=\"~/pages/docs/runtime/filesystem.md\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"57\">ezFileSystem</a> which adds functionality for virtual file systems through mount points. For example a compressed file or a remote folder may be mounted as a read-only directory. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"57\">ezFileSystem</code> is the central class to manage file accesses, but to actually read or write a file, use <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"57\">ezFileReader</code> and <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"57\">ezFileWriter</code>, which also implement the <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"57\">ezStream*</code> interface.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"59\">To store data in a structured way, <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"59\">ezJSONWriter</code> and <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"59\">ezOpenDdlWriter</code> are provided. For convenient retrieval <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"59\">ezJSONReader</code> and <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"59\">ezOpenDdlReader</code> are available. For less convenient but more flexible and efficient JSON/<a href=\"http://openddl.org/\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"59\">OpenDDL</a> reading you can also use <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"59\">ezJSONParser</code> or <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"59\">ezOpenDdlParser</code>.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"61\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"61\">Foundation\\Reflection</strong> you will find the reflection system of ezEngine. This is used by the game objects and some other high-level code for object type identification and properties. This may be used for scripting, for setting up objects from configuration files and for editors. Most notable classes are <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"61\">ezRTTI</code> and <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"61\">ezReflectedClass</code>.</p>\n<h2 id=\"library-overview-core\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"63\">Library Overview: Core</h2>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"65\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"65\">Core</strong> you will find the core engine infrastructure.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"67\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"67\">Core\\Application</strong> you can find code to more easily set up your application loop in a platform independent way.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"69\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"69\">Core\\Graphics</strong> you will find code commonly needed for doing graphics, such as <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"69\">ezCamera</code> for camera controls and <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"69\">ezGeometry</code> to create geometric objects.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"71\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"71\">Core\\Input</strong> you will find <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"71\">ezInputManager</code> which can be used for retrieving input from various different devices, e.g. mouse, keyboard, gamepad or virtual thumbstick. The system is easily extensible to include custom devices.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"73\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"73\">Core\\ResourceManager</strong> you will find the static class <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"73\">ezResourceManager</code> which is the central class for resource loading (e.g. textures, shaders, etc.). For implementing custom resource types you need to derive from <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"73\">ezResource</code> and for customizing the loading procedure you may need to implement a custom <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"73\">ezResourceTypeLoader</code>. All resources are referenced through <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"73\">ezResourceHandle</code> types, which implement reference counting.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"75\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"75\">Core\\Scripting</strong> you can find <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"75\">ezLuaWrapper</code> that allows to easily work with Lua scripts.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"77\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"77\">Core\\World</strong> you will find the game object system. <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"77\">ezGameObject</code> is the class to use to manage entities, <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"77\">ezComponent</code> is the base component class that allows to implement and attach components to your entities. All entities belong to an instance of <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"77\">ezWorld</code>, which represents your scene graph.</p>\n<h2 id=\"library-overview-gameengine\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"79\">Library Overview: GameEngine</h2>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"81\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"81\">GameEngine</strong> you will find all the high-level code needed in a game engine.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"83\"><strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"83\">GameEngine\\Console</strong> contains code for a Quake-like in-game console that can be used for changing the game configuration (through <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"83\">ezCVar</code> or custom functions) and to see the <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"83\">ezLog</code> output.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"85\"><strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"85\">GameEngine\\GameApplication</strong> contains <a href=\"~/pages/docs/runtime/application/application.md\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"85\">ezGameApplication</a>, which extends <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"85\">ezApplication</code> with higher-level, more game specific functionality. This is one of the most important high-level classes to look at and extend when writing your own, stand-alone game application (assuming you can't do so with <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"85\">ezGameState</code> alone).</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"87\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"87\">GameEngine\\GameState</strong> you find <a href=\"~/pages/docs/runtime/application/game-state.md\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"87\">ezGameState</a>, which is the most important class to extend when writing your own game code, especially if you want to be able to run your code within the editor.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"89\"><strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"89\">GameEngine\\Interfaces</strong> contains various interface definitions for instance for basic interactions with physics and audio engines.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"91\"><strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"91\">GameEngine\\Prefabs</strong> contains the code to work with prefabs.</p>\n<h2 id=\"library-overview-texture\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"93\">Library Overview: Texture</h2>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"95\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"95\">Texture</strong> you will find various things related to working with images and textures.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"97\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"97\">Texture\\Image</strong> you will find <code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"97\">ezImage</code> which can be used to read, write and convert images from various formats.</p>\n<h2 id=\"library-overview-utilities\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"99\">Library Overview: Utilities</h2>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"101\">In <strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"101\">Utilities</strong> you will find various different things that may be useful, but are not used by the general engine runtime. They may be used by some tool or by a sample game, though.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"103\"><strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"103\">Utilities\\DataStructures</strong> contains data structures that are too engine specific. Here you will find things such as octree and quadtree implementations (<code sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"103\">ezDynamicOctree</code>).</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"105\"><strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"105\">Utilities\\GridAlgorithms</strong> contains functionality to rasterize circles and lines into grids. This can be extremely useful for 2D top down games, like strategy games, to do line-of-sight computations and such.</p>\n<p sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"107\"><strong sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"107\">Utilities\\PathFinding</strong> contains functionality to do path searches on graphs and simple nav-mesh generation for 2D grids.</p>\n<h2 id=\"see-also\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"109\">See Also</h2>\n<ul sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"112\">\n<li sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"112\"><a href=\"~/pages/samples/samples-overview.md\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"112\">Samples</a></li>\n</ul>\n",
  "type": "Conceptual",
  "source": {
    "remote": {
      "path": "pages/docs/appendix/library-structure.md",
      "branch": "main",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0,
    "endLine": 0
  },
  "path": "pages/docs/appendix/library-structure.md",
  "documentation": {
    "remote": {
      "path": "pages/docs/appendix/library-structure.md",
      "branch": "main",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0,
    "endLine": 0
  },
  "_appFaviconPath": "assets/images/favicon.svg",
  "_appFooter": "Hello",
  "_appLogoPath": "assets/images/EZ-text.svg",
  "_appName": "ezEngine",
  "_appTitle": "ezEngine",
  "_enableGoogleAnalytics": true,
  "_enableNewTab": true,
  "_enableSearch": true,
  "_gitContribute": {
    "repo": "https://github.com/ezEngine/docs-src",
    "branch": "main"
  },
  "_systemKeys": [
    "conceptual",
    "type",
    "source",
    "path",
    "documentation",
    "title",
    "rawTitle",
    "wordCount"
  ],
  "rawTitle": "<h1 id=\"library-structure\" sourcefile=\"pages/docs/appendix/library-structure.md\" sourcestartlinenumber=\"1\">Library Structure</h1>",
  "title": "Library Structure",
  "wordCount": 1772,
  "_key": "pages/docs/appendix/library-structure.md",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../../toc.html",
  "_path": "pages/docs/appendix/library-structure.html",
  "_rel": "../../../",
  "_tocKey": "~/pages/docs/toc.md",
  "_tocPath": "pages/docs/toc.html",
  "_tocRel": "../toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  },
  "_disableToc": false,
  "docurl": "https://github.com/ezEngine/docs-src/blob/main/pages/docs/appendix/library-structure.md/#L1"
}