{
  "conceptual": "\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"3\">For formatting strings there are a couple of different options:</p>\n<ul sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"5\">\n<li sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"5\"><code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"5\">ezConversionUtils</code> provides various <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"5\">ToString</code> functions. These are useful for generic cases, where only individual variables need to be converted to a string representation and no control over the exact formatting is needed. <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"5\">ezConversionUtils</code> also provides functions to parse strings for numbers.</li>\n<li sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"6\"><code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"6\">ezStringUtils::snprintf</code> is a custom implementation of the infamous C <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"6\">printf</code> function, with better security against buffer overruns and consistent behavior across platforms. It is available, but should generally be avoided, as it cannot provide any type safety.</li>\n<li sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"7\"><code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"7\">ezFormatString</code> is the preferred way to do string formatting. It is easy to use, fully type safe, extensible with custom formatters and optimized for performance by doing only very few allocation and delaying the formatting until it is needed, which enables functions to not pay the price for formatting an incoming string, if the function doesn't actually use the result.</li>\n</ul>\n<h2 id=\"using-ezformatstring-as-an-argument\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"9\">Using ezFormatString as an Argument</h2>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"11\"><code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"11\">ezFormatString</code> is a class that can be easily used as a function parameter to accept formatted strings:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"13\">void Print(const ezFormatString&amp; text);\n</code></pre>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"17\">A function that takes just an <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"17\">ezFormatString</code> has to be called with the <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"17\">ezFmt</code> wrapper:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"19\">Print(ezFmt(&quot;Hello {}&quot;, &quot;World&quot;));\n</code></pre>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"23\">The <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"23\">ezFmt</code> function is a variadic template, that can take up to 10 arguments and wraps them all up into an <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"23\">ezFormatString</code> object.</p>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"25\">If you want your <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"25\">Print</code> function to be a little bit more convenient, and not require the use of <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"25\">ezFmt</code>, you can add an overload that provides the variadic template functionality directly.</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"27\">template &lt;typename... ARGS&gt;\nvoid Print(const char* szFormat, ARGS&amp;&amp;... args)\n{\n    Print(ezFormatStringImpl&lt;ARGS...&gt;(szFormat, std::forward&lt;ARGS&gt;(args)...));\n}\n</code></pre>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"35\">Now <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"35\">Print</code> can be called like this:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"37\">Print(&quot;Hello {}&quot;, &quot;World&quot;);\n</code></pre>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"41\">Inside <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"41\">Print</code>, all you need to do to get the formatted string is to call <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"41\">ezFormatString::GetText()</code>:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"43\">void Print(const ezFormatString&amp; text)\n{\n    ezStringBuilder tmp;\n    const char* szResult = text.GetText(tmp);\n\n    // do something with szResult, do not use tmp, as it is not guaranteed to hold the result (meaning, it may not have been needed)\n}\n</code></pre>\n<h2 id=\"using-ezformatstring\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"53\">Using ezFormatString</h2>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"55\">Once a function takes an <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"55\">ezFormatString</code> (see above), you can use <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"55\">{}</code> notation to indicate where an argument shall be inserted.</p>\n<h3 id=\"positional-arguments\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"57\">Positional Arguments</h3>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"59\">If a formatting string contains <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"59\">{}</code>, every instance will use the <em sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"59\">next</em> argument, as given to the function. You can also use <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"59\">{n}</code> with n being <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"59\">0</code> to <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"59\">9</code> to insert the n-th argument. This allows you to skip, rearrange, or repeat arguments:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"61\">Print(&quot;Arg1: {1}, Arg2: {2}, Arg1: {1}&quot;, &quot;zero&quot;, &quot;one&quot;, &quot;two&quot;);\n</code></pre>\n<h3 id=\"formatting-options\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"65\">Formatting Options</h3>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"67\">Most types that can be formatted, can be passed in directly:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"69\">Print(&quot;int value is {}&quot;, 23);\n</code></pre>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"73\">However, often you may want to specify exactly how to display the value. To do so, you need to wrap the incoming argument in an option struct. Each option struct can have arbitrary parameters to configure how it works.</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"75\">Print(&quot;HEX: 0x{}&quot;, ezArgU(value, 8, true, 16, true));\n</code></pre>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"79\"><code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"79\">ezArgU</code> is an option struct for unsigned int values. Here we specify that the output should have a fixed <em sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"79\">width</em> of 8 characters, should pad the output with zeros if necessary, use base 16 (hex) and upper case letters.</p>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"81\">There are many such option structs available, each with their own parameters. By convention, all formatting option structs are named <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"81\">ezArgXYZ</code>.</p>\n<h3 id=\"available-option-structs\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"83\">Available Option Structs</h3>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"85\">This is a not necessarily complete list of available option structs:</p>\n<ul sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"87\">\n<li sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"87\"><code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"87\">ezArgC</code> - for single characters</li>\n<li sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"88\"><code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"88\">ezArgF</code> - for floating point values</li>\n<li sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"89\"><code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"89\">ezArgI</code> - for int values</li>\n<li sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"90\"><code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"90\">ezArgU</code> - for unsigned int values</li>\n<li sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"91\"><code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"91\">ezArgP</code> - for pointers</li>\n<li sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"92\"><code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"92\">ezArgErrorCode</code> - for Windows error codes</li>\n<li sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"93\"><code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"93\">ezArgDateTime</code> - for ezDateTime</li>\n<li sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"94\"><code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"94\">ezArgHumanReadable</code> - for shortening numbers with suffixes (such as <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"94\">K</code> (kilo) and <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"94\">M</code> (mega))</li>\n<li sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"95\"><code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"95\">ezArgFileSize</code> - for shortening file sizes and use suffixes (such as <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"95\">KB</code> and <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"95\">MB</code>)</li>\n</ul>\n<h3 id=\"custom-argument-formatters\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"97\">Custom Argument Formatters</h3>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"99\">You can easily write your own formatter. The formatting work is done by a free function called <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"99\">BuildString</code>, overloaded for the type that it shall format. If you search for <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"99\">BuildString</code> functions, you will find many overloads, each handling a different type. Please look at those functions to see how to write your own formatter.</p>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"101\">For it to work, all that is necessary, is that your code is <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"101\">#include</code>'d when it is used in a format string. If you try to use a type (such as <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"101\">MyType</code>) in a format string and your custom formatter is not known (<code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"101\">#include</code>'d) in that cpp file, you will get a compile time error with a <em sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"101\">very long</em> message telling you that no overload of of <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"101\">BuildString</code> is available to handle this type.</p>\n<p sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"103\">The <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"103\">ezArgXYZ</code> structs are just used to wrap a type and store additional options. This is not required, for <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"103\">BuildString</code> to work, but it does allow you to wrap the same type multiple times to select different formatters. For example, unsigned int is wrapped by <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"103\">ezArgU</code> for regular int formatting options, by <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"103\">ezArgFileSize</code> to print a value with <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"103\">B</code>, <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"103\">KB</code>, <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"103\">MB</code> or <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"103\">GB</code> suffixes and by <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"103\">ezArgErrorCode</code> to interpret it as a Windows error code and translate it to a readable string. If you have a custom type <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"103\">MyType</code> and you do not need any formatting options, you can write a <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"103\">BuildString</code> overload, that takes a <code sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"103\">MyType</code> directly.</p>\n<h2 id=\"see-also\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"105\">See Also</h2>\n<ul sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"108\">\n<li sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"108\"><a href=\"~/pages/docs/appendix/string-usage.md\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"108\">String Usage Guidelines</a></li>\n</ul>\n",
  "type": "Conceptual",
  "source": {
    "remote": {
      "path": "pages/docs/appendix/string-formatting.md",
      "branch": "main",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0,
    "endLine": 0
  },
  "path": "pages/docs/appendix/string-formatting.md",
  "documentation": {
    "remote": {
      "path": "pages/docs/appendix/string-formatting.md",
      "branch": "main",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0,
    "endLine": 0
  },
  "_appFaviconPath": "assets/images/favicon.svg",
  "_appFooter": "Hello",
  "_appLogoPath": "assets/images/EZ-text.svg",
  "_appName": "ezEngine",
  "_appTitle": "ezEngine",
  "_enableGoogleAnalytics": true,
  "_enableNewTab": true,
  "_enableSearch": true,
  "_gitContribute": {
    "repo": "https://github.com/ezEngine/docs-src",
    "branch": "main"
  },
  "_systemKeys": [
    "conceptual",
    "type",
    "source",
    "path",
    "documentation",
    "title",
    "rawTitle",
    "wordCount"
  ],
  "rawTitle": "<h1 id=\"string-formatting\" sourcefile=\"pages/docs/appendix/string-formatting.md\" sourcestartlinenumber=\"1\">String Formatting</h1>",
  "title": "String Formatting",
  "wordCount": 850,
  "_key": "pages/docs/appendix/string-formatting.md",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../../toc.html",
  "_path": "pages/docs/appendix/string-formatting.html",
  "_rel": "../../../",
  "_tocKey": "~/pages/docs/toc.md",
  "_tocPath": "pages/docs/toc.html",
  "_tocRel": "../toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  },
  "_disableToc": false,
  "docurl": "https://github.com/ezEngine/docs-src/blob/main/pages/docs/appendix/string-formatting.md/#L1"
}