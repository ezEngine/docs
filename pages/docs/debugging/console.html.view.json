{
  "conceptual": "\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"3\">The in-game console is a utility for inspecting the <a href=\"~/pages/docs/debugging/logging.md\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"3\">log</a>, modifying <a href=\"~/pages/docs/debugging/cvars.md\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"3\">CVars</a> and calling <a href=\"#console-functions\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"3\">console functions</a>.</p>\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"5\"><img src=\"~/pages/docs/debugging/media/console.png\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"5\" alt=\"Console\"></p>\n<h2 id=\"key-bindings\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"7\">Key bindings</h2>\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"9\">The default key binding for the console is:</p>\n<ul sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"11\">\n<li sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"11\"><strong sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"11\">F1</strong> - Opens/closes the console.</li>\n<li sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"12\"><strong sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"12\">Up / Down</strong> - Select a previously entered command from the history. Note that the history is saved to disk so that commands don't need to be typed again after restarting.</li>\n<li sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"13\"><strong sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"13\">F2</strong> and <strong sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"13\">F3</strong> - Repeat last and second-to-last commands. This works even when the console is currently closed.</li>\n<li sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"14\"><strong sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"14\">ESC</strong> - Clears the input line.</li>\n<li sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"15\"><strong sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"15\">Page Up / Page Down</strong> - Scrolls the log output up / down.</li>\n<li sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"16\"><strong sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"16\">TAB</strong> - Auto-completes the current input. Also displays all available input options in the output. Ie. lists the names of CVars and console functions and prints their descriptions.</li>\n<li sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"17\"><strong sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"17\">Enter</strong> - Executes the typed command. If the typed text is only the name of a CVar without an assignment, this will simply print the current value and the description of the CVar.</li>\n</ul>\n<h2 id=\"modify-cvars\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"19\">Modify CVars</h2>\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"21\">You can modify CVars by typing:</p>\n<pre><code class=\"lang-cmd\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"23\">CVarName = value\n</code></pre>\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"27\">See the <a href=\"~/pages/docs/debugging/cvars.md\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"27\">CVars</a> chapter for details.</p>\n<h2 id=\"binding-keys\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"29\">Binding Keys</h2>\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"31\">To bind commands to certain keys you can call:</p>\n<pre><code class=\"lang-cmd\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"33\">bind f g_showFPS=\n</code></pre>\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"37\">This would bind the command 'g_showFPS=' (which toggles the display of the FPS counter) to the f-key. You can only bind commands to printable characters (a-z, 0-9) and the casing matters. So you can also bind another command to SHIFT+f by using <code sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"37\">bind F ...</code>.</p>\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"39\">To unbind a key call:</p>\n<pre><code class=\"lang-cmd\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"41\">unbind f\n</code></pre>\n<h2 id=\"search\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"45\">Search</h2>\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"47\">You can filter the output of the console (the log messages) to only strings that contain some string by typing a <strong sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"47\">*</strong> at the beginning:</p>\n<pre><code class=\"lang-cmd\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"49\">*some text\n</code></pre>\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"53\">Now the output window will only show strings that contain 'some text'.</p>\n<h2 id=\"console-functions\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"55\">Console Functions</h2>\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"57\">Console functions are an easy way to expose C++ utility functions through the console. The class <code sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"57\">ezConsoleFunction</code> is used to wrap any function (static or method function) in a delegate and enable the console to call it. Of course, since the user can only input certain types of variables in the console, the argument types that you can use are very limited: strings, numbers (int / float) and boolean.</p>\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"59\">This code snippet shows how to declare a console function in a class, for example inside a custom <a href=\"~/pages/docs/runtime/application/game-state.md\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"59\">game state</a>.</p>\n<!-- BEGIN-DOCS-CODE-SNIPPET: confunc-decl -->\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"62\">void ConFunc_Print(ezString sText);\nezConsoleFunction&lt;void(ezString)&gt; m_ConFunc_Print;\n</code></pre>\n<!-- END-DOCS-CODE-SNIPPET -->\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"68\">In the implementation the binding has to be completed. You need to provide a name under which to expose the function, a description (this should include the parameter list) and the actual function to forward the call to. For member functions this has to be an <code sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"68\">ezDelegate</code> to also bind to the class instance (<code sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"68\">this</code>).</p>\n<!-- BEGIN-DOCS-CODE-SNIPPET: confunc-impl -->\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"71\">SampleGameState::SampleGameState()\n  : m_ConFunc_Print(&quot;Print&quot;, &quot;(string arg1): Prints 'arg1' to the log&quot;, ezMakeDelegate(&amp;SampleGameState::ConFunc_Print, this))\n{\n}\n\nvoid SampleGameState::ConFunc_Print(ezString sText)\n{\n  ezLog::Info(&quot;Text: '{}'&quot;, sText);\n}\n</code></pre>\n<!-- END-DOCS-CODE-SNIPPET -->\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"84\">When you now open the console (F1) in-game and press TAB, the 'Print' function will be among the listed functions. You can then execute it:</p>\n<pre><code class=\"lang-cmd\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"86\">Print(&quot;Hello Console&quot;)\n</code></pre>\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"90\">If you need to call a certain function repeatedly, you can <a href=\"#binding-keys\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"90\">bind the call to a key</a> or use F2 and F3 to repeat it, as long as it is the last or second-to-last command in your history.</p>\n<h3 id=\"typescript\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"92\">TypeScript</h3>\n<p sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"94\">You can also register custom console functions through the <a href=\"~/pages/docs/custom-code/typescript/ts-api.md#ezdebug\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"94\">TypeScript API</a>.</p>\n<h2 id=\"see-also\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"96\">See Also</h2>\n<ul sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"98\">\n<li sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"98\"><a href=\"~/pages/docs/debugging/cvars.md\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"98\">CVars</a></li>\n<li sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"99\"><a href=\"~/pages/docs/debugging/logging.md\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"99\">Logging</a></li>\n</ul>\n",
  "type": "Conceptual",
  "source": {
    "remote": {
      "path": "pages/docs/debugging/console.md",
      "branch": "main",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0.0,
    "endLine": 0.0
  },
  "path": "pages/docs/debugging/console.md",
  "documentation": {
    "remote": {
      "path": "pages/docs/debugging/console.md",
      "branch": "main",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0.0,
    "endLine": 0.0
  },
  "_appFaviconPath": "assets/images/favicon.svg",
  "_appFooter": "Hello",
  "_appLogoPath": "assets/images/EZ-text.svg",
  "_appName": "ezEngine",
  "_appTitle": "ezEngine",
  "_enableGoogleAnalytics": true,
  "_enableNewTab": true,
  "_enableSearch": true,
  "_gitContribute": {
    "repo": "https://github.com/ezEngine/docs-src",
    "branch": "main"
  },
  "_systemKeys": [
    "conceptual",
    "type",
    "source",
    "path",
    "documentation",
    "title",
    "rawTitle",
    "wordCount"
  ],
  "rawTitle": "<h1 id=\"console\" sourcefile=\"pages/docs/debugging/console.md\" sourcestartlinenumber=\"1\">Console</h1>",
  "title": "Console",
  "wordCount": 535.0,
  "_key": "pages/docs/debugging/console.md",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../../toc.html",
  "_path": "pages/docs/debugging/console.html",
  "_rel": "../../../",
  "_tocKey": "~/pages/docs/toc.md",
  "_tocPath": "pages/docs/toc.html",
  "_tocRel": "../toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  },
  "_disableToc": false,
  "docurl": "https://github.com/ezEngine/docs-src/blob/main/pages/docs/debugging/console.md/#L1"
}