{
  "conceptual": "\n<p sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"3\">XR input is not much different from regular <a href=\"~/pages/docs/input/input-overview.md\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"3\">input</a>. XR controllers are normal input devices that are provided by the <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"3\">ezXRInputDevice</code> and work just like any other input device with the added feature set that the controllers can be tracked in space.</p>\n<h2 id=\"xr-feature-flags\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"5\">XR Feature Flags</h2>\n<p sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"7\">There are various kinds of XR controllers which varying feature sets. At runtime, you can query the existance of a type of device via the <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"7\">ezXRInputDevice::GetDeviceIDByType</code> function and its supported features by using the <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"7\">ezXRInputDevice::GetDeviceFeatures</code> function.</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"9\">ezXRInterface* pXRInterface = ezSingletonRegistry::GetSingletonInstance&lt;ezXRInterface&gt;();\nezXRInputDevice&amp; xrInput = pXRInterface-&gt;GetXRInput();\nezXRDeviceID deviceID = pXRInterface-&gt;GetXRInput().GetDeviceIDByType(ezXRDeviceType::LeftController);\nif (deviceID != -1)\n{\n    ezBitflags&lt;ezXRDeviceFeatures&gt; features = pXRInterface-&gt;GetXRInput().GetDeviceFeatures(deviceID);\n    if (features.IsSet(ezXRDeviceFeatures::GripPose))\n    {\n</code></pre>\n<p sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"20\">Besides using the feature flags, you can also query the name of the controller via the <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"20\">ezXRInputDevice::GetDeviceName</code> call. This will return e.g. <strong sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"20\">Mixed Reality Motion Controller</strong> or <strong sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"20\">Hand Interaction</strong>.</p>\n<h2 id=\"xr-device-presence\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"22\">XR Device Presence</h2>\n<p sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"24\">The <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"24\">ezXRDeviceType::HMD</code> represents your head and is always present. This is not true for other controller. You can either poll their state via the <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"24\">ezXRInputDevice::GetDeviceIDByType</code> function or you can subscribe to <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"24\">ezXRInputDevice::GetInputEvent</code> which will inform you whenever input devices are added or removed.</p>\n<h2 id=\"xr-input-mapping\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"26\">XR Input Mapping</h2>\n<p sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"28\">XR input slots are defined in <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"28\">Code\\Engine\\GameEngine\\XR\\XRInputDevice.h</code> and all start with <strong sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"28\">xr_</strong>. Use the same machanism as for other input controllers to create an <a href=\"~/pages/docs/input/input-config.md\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"28\">input set configuration</a>.</p>\n<h2 id=\"pose-tracking\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"30\">Pose Tracking</h2>\n<p sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"32\">XR controllers also provide positional data. You can either use the <a href=\"~/pages/docs/xr/xr-components.md#device-tracking-component\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"32\">ezDeviceTrackingComponent</a> to automatically make a game object follow a controller or you can manually query the controller transform using the <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"32\">ezXRInputDevice::GetDeviceState</code> function.</p>\n<p sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"34\">Many devices support two poses <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"34\">Grip</code> and <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"34\">Aim</code>. The difference between the two is nicely explained <a href=\"https://registry.khronos.org/OpenXR/specs/1.0/html/xrspec.html#semantic-path-standard-pose-identifiers\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"34\">here</a>.</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"36\">ezXRInterface* pXRInterface = ezSingletonRegistry::GetSingletonInstance&lt;ezXRInterface&gt;();\nezXRInputDevice&amp; xrInput = pXRInterface-&gt;GetXRInput();\nezXRDeviceID deviceID = pXRInterface-&gt;GetXRInput().GetDeviceIDByType(ezXRDeviceType::LeftController);\nif (deviceID != -1)\n{\n    const ezXRDeviceState&amp; state = pXRInterface-&gt;GetXRInput().GetDeviceState(deviceID);\n    if (state.m_bDeviceIsConnected &amp;&amp; state.m_bGripPoseIsValid)\n    {\n        ezVec3 vPosition = state.m_vGripPosition;\n        ezQuat qRotation = state.m_qGripRotation;\n</code></pre>\n<p sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"48\">You should check for <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"48\">m_bDeviceIsConnected</code> and either <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"48\">m_bGripPoseIsValid</code> or <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"48\">m_bAimPoseIsValid</code> before accessing the transform. Due to e.g. tracking loss, the controller can provide invalid poses at any point.</p>\n<h2 id=\"hand-tracking\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"50\">Hand Tracking</h2>\n<p sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"52\">Hands (if supported by the platform) are exposed as input controllers via the input system as well as via raw hand-tracked data. If basic click interaction and pose tracking is not enough, you can use the <code sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"52\">ezXRHandTrackingInterface</code> if present, to query the bone positions of your hands:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"54\">ezXRHandTrackingInterface* pXRHand = ezSingletonRegistry::GetSingletonInstance&lt;ezXRHandTrackingInterface&gt;();\nif (!pXRHand)\n    return;\n\nezHybridArray&lt;ezXRHandBone, 6&gt; bones;\nfor (ezXRHand::Enum hand : {ezXRHand::Left, ezXRHand::Right})\n{\n    for (ezUInt32 uiPart = 0; uiPart &lt; ezXRHandPart::COUNT; ++uiPart)\n    {\n        ezXRHandPart::Enum part = static_cast&lt;ezXRHandPart::Enum&gt;(uiPart);\n        if (pXRHand-&gt;TryGetBoneTransforms(hand, part, ezXRTransformSpace::Global, bones) == ezXRHandTrackingInterface::HandPartTrackingState::Tracked)\n        {\n</code></pre>\n<h2 id=\"see-also\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"69\">See Also</h2>\n<ul sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"71\">\n<li sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"71\"><a href=\"~/pages/docs/input/input-overview.md\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"71\">Input</a></li>\n<li sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"72\"><a href=\"~/pages/docs/xr/xr-overview.md\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"72\">XR Overview</a></li>\n<li sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"73\"><a href=\"~/pages/docs/xr/xr-components.md\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"73\">XR Components</a></li>\n</ul>\n",
  "type": "Conceptual",
  "source": {
    "remote": {
      "path": "pages/docs/xr/xr-input.md",
      "branch": "main",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0.0,
    "endLine": 0.0
  },
  "path": "pages/docs/xr/xr-input.md",
  "documentation": {
    "remote": {
      "path": "pages/docs/xr/xr-input.md",
      "branch": "main",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0.0,
    "endLine": 0.0
  },
  "_appFaviconPath": "assets/images/favicon.svg",
  "_appFooter": "Hello",
  "_appLogoPath": "assets/images/EZ-text.svg",
  "_appName": "ezEngine",
  "_appTitle": "ezEngine",
  "_enableGoogleAnalytics": true,
  "_enableNewTab": true,
  "_enableSearch": true,
  "_gitContribute": {
    "repo": "https://github.com/ezEngine/docs-src",
    "branch": "main"
  },
  "_systemKeys": [
    "conceptual",
    "type",
    "source",
    "path",
    "documentation",
    "title",
    "rawTitle",
    "wordCount"
  ],
  "rawTitle": "<h1 id=\"xr-input\" sourcefile=\"pages/docs/xr/xr-input.md\" sourcestartlinenumber=\"1\">XR Input</h1>",
  "title": "XR Input",
  "wordCount": 419.0,
  "_key": "pages/docs/xr/xr-input.md",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../../toc.html",
  "_path": "pages/docs/xr/xr-input.html",
  "_rel": "../../../",
  "_tocKey": "~/pages/docs/toc.md",
  "_tocPath": "pages/docs/toc.html",
  "_tocRel": "../toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  },
  "_disableToc": false,
  "docurl": "https://github.com/ezEngine/docs-src/blob/main/pages/docs/xr/xr-input.md/#L1"
}