{
  "conceptual": "\n<p sourcefile=\"pages/docs/xr/xr-graphics.md\" sourcestartlinenumber=\"3\">XR needs to render two images, one for each eye. Therefore, special care needs to be taken when authoring shaders to make sure they support stereo rendering.</p>\n<h2 id=\"material-shaders\" sourcefile=\"pages/docs/xr/xr-graphics.md\" sourcestartlinenumber=\"5\">Material Shaders</h2>\n<p sourcefile=\"pages/docs/xr/xr-graphics.md\" sourcestartlinenumber=\"7\">To make a material shader work with stereo rendering, it must contain the following sections:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/xr/xr-graphics.md\" sourcestartlinenumber=\"9\">[PERMUTATIONS]\n// Will be set to CAMERA_MODE_STEREO.\nCAMERA_MODE\n\n// Defined if the GPU supports setting the render target array index in the vertex shader. If not, a geometry shader will be used.\nVERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX\n\n[VERTEXSHADER]\n#include &lt;Shaders/Materials/MaterialVertexShader.h&gt;\n\nVS_OUT main(VS_IN Input)\n{\n  // FillVertexData will set s_ActiveCameraEyeIndex to either 0 or 1. s_ActiveCameraEyeIndex is used in all camera related functions to pull in the correct eye projection / transform etc.\n  VS_OUT Output = FillVertexData(Input);\n  //...\n  return Output;\n}\n\n[GEOMETRYSHADER]\n// Will only be active if VERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX is not supported.\n#include &lt;Shaders/Materials/MaterialStereoGeometryShader.h&gt;\n\n[PIXELSHADER]\n// If you use the default MaterialPixelShader.h and just implement GetDiffuseColor() etc then all stereo rendering is done for you. If you write a custom pixel shader, you will need to add this at the start:\n//  #if CAMERA_MODE == CAMERA_MODE_STEREO\n//    s_ActiveCameraEyeIndex = Input.RenderTargetArrayIndex;\n//  #endif\n#include &lt;Shaders/Materials/MaterialPixelShader.h&gt;\n\n</code></pre>\n<h2 id=\"postprocessing-shaders\" sourcefile=\"pages/docs/xr/xr-graphics.md\" sourcestartlinenumber=\"41\">Postprocessing Shaders</h2>\n<p sourcefile=\"pages/docs/xr/xr-graphics.md\" sourcestartlinenumber=\"43\">Post-processing shaders are a bit more complicated than material shaders as they usually pull in data from a previous render pipeline pass which will now be an array texture as the input will be stereo as well. Here is a small example of a full-screen render pass and what it requires in order to work in stereo mode:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/xr/xr-graphics.md\" sourcestartlinenumber=\"45\">[PERMUTATIONS]\n// Will be set to CAMERA_MODE_STEREO.\nCAMERA_MODE\n\n// Defined if the GPU supports setting the render target array index in the vertex shader. If not, a geometry shader will be used.\nVERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX\n\n[VERTEXSHADER]\n#include &lt;Shaders/Pipeline/FullscreenTriangleVertexShader.h&gt;\n\n[GEOMETRYSHADER]\n// Will only be active if VERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX is not supported.\n#include &lt;Shaders/Pipeline/FullscreenTriangleStereoGeometryShader.h&gt;\n\n[PIXELSHADER]\n#include &lt;Shaders/Pipeline/FullscreenTriangleInterpolator.h&gt;\n\n// Note that this will work fine in non-stereo rendering as well as 2D textures are just 2D-array texture with very few slices.\nTexture2DArray Input;\n\nfloat4 main(PS_IN input) : SV_Target\n{\n  // To make all camera related functions work correctly, this must be called at the very start to define the right eye.\n  #if CAMERA_MODE == CAMERA_MODE_STEREO\n    s_ActiveCameraEyeIndex = Input.RenderTargetArrayIndex;\n  #endif\n\n  float4 res = Input.Sample(LinearClampSampler, float3(input.TexCoord0, s_ActiveCameraEyeIndex));\n  //...\n  return res;\n}\n</code></pre>\n",
  "type": "Conceptual",
  "source": {
    "remote": {
      "path": "pages/docs/xr/xr-graphics.md",
      "branch": "docfx_update",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0.0,
    "endLine": 0.0
  },
  "path": "pages/docs/xr/xr-graphics.md",
  "documentation": {
    "remote": {
      "path": "pages/docs/xr/xr-graphics.md",
      "branch": "docfx_update",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0.0,
    "endLine": 0.0
  },
  "_appFaviconPath": "assets/images/favicon.svg",
  "_appFooter": "Hello",
  "_appLogoPath": "assets/images/EZ-text.svg",
  "_appName": "ezEngine",
  "_appTitle": "ezEngine",
  "_enableGoogleAnalytics": true,
  "_enableNewTab": true,
  "_enableSearch": true,
  "_gitContribute": {
    "repo": "https://github.com/ezEngine/docs-src",
    "branch": "main"
  },
  "_systemKeys": [
    "conceptual",
    "type",
    "source",
    "path",
    "documentation",
    "title",
    "rawTitle",
    "wordCount"
  ],
  "rawTitle": "<h1 id=\"xr-graphics\" sourcefile=\"pages/docs/xr/xr-graphics.md\" sourcestartlinenumber=\"1\">XR Graphics</h1>",
  "title": "XR Graphics",
  "wordCount": 365.0,
  "_key": "pages/docs/xr/xr-graphics.md",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../../toc.html",
  "_path": "pages/docs/xr/xr-graphics.html",
  "_rel": "../../../",
  "_tocKey": "~/pages/docs/toc.md",
  "_tocPath": "pages/docs/toc.html",
  "_tocRel": "../toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  },
  "_disableToc": false,
  "docurl": "https://github.com/ezEngine/docs-src/blob/main/pages/docs/xr/xr-graphics.md/#L1"
}