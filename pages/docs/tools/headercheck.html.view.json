{
  "conceptual": "\n<h2 id=\"types-of-header-files\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"3\">Types of Header Files</h2>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"5\">The code in ezEngine differentiates between two types of header files:</p>\n<ul sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"7\">\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"7\"><strong sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"7\">Public Header Files</strong>: Public header files are header files that can be included by third party. These header files should not leak any implementation details like platform headers. A third party is any library or executable outside of the currently compiled library / executable. For example when ezFoundation is compiled, everything else is considered a third party.</li>\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"8\"><strong sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"8\">Internal Header Files</strong>: Internal header files may include platform headers and leak implementation detail, but can only be used within a subcomponent of ezEngine (for example only inside ezFoundation). Using them from outside of the component will cause a compiler error.</li>\n</ul>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"10\">To mark up a header file as a internal header file, first include the component's internal.h file and then use the component specific macro. The component's internal header file is called <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"10\">ComponentInternal.h</code> and the macro is called <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"10\">EZ_COMPONENT_INTERNAL_HEADER</code>.</p>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"12\">The following example shows how to mark a header file as internal for ezFoundation:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"14\">#include &lt;Foundation/FoundationInternal.h&gt;\nEZ_FOUNDATION_INTERNAL_HEADER\n</code></pre>\n<h2 id=\"the-header-checker-tool\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"19\">The Header Checker Tool</h2>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"21\">The header checker tool will automatically be run by the continues integration to check for leakage of implementation detail. If a leak is found the build will fail. Usually you will see an error message such as:</p>\n<pre><code class=\"lang-plaintext\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"23\">Including 'wrl/wrappers/corewrappers.h' in ezEngine/Code/Engine/Foundation/Strings/StringConversion.h:9 leaks underlying implementation detail. Including system or thirdparty headers in public EZ header files is not allowed. Please use an interface, factory or pimpl to hide the implementation and avoid the include.\n</code></pre>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"27\">In this example including <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"27\">wrl/wrappers/corewrappers.h</code> is illegal. This header file is included from <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"27\">ezEngine/Code/Engine/Foundation/Strings/StringConversion.h</code> at line 9. To fix these issues follow one of the techniques below to hide implementation details.</p>\n<h2 id=\"hiding-implementation-detail\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"29\">Hiding Implementation Detail</h2>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"31\">To consider the different options of hiding implementation detail have a look at the following example</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"33\">#include &lt;d3d11.h&gt;\n\nclass ezTexture2D\n{\npublic:\n    void Bind();\n\nprivate:\n    ID3D11Texture2D* m_ptr;\n};\n</code></pre>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"46\">If a user includes this header file, the underlying implementation detail is leaked as the user will need the <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"46\">d3d11.h</code> header in order to compile the code. Furthermore the user might need exactly the same version of the <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"46\">d3d11.h</code> file in order for the code to compile. This is a leaky abstraction. Ideally classes that wrap functionality should not leak any of their implementation details to the user. The following techniques can be used to hide implementation detail.</p>\n<h3 id=\"forward-declarations\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"48\">Forward Declarations</h3>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"50\">Forward declarations can be used to remove the need to include a header file, therefor removing the leaky abstraction. Consider the following fixed version of the <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"50\">ezTexture2D</code> class:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"52\">struct ID3D11Texture2D; // Forward declare ID3D11Texture2D\n\nclass ezTexture2D\n{\npublic:\n    void Bind();\n\nprivate:\n    ID3D11Texture2D* m_ptr;\n};\n</code></pre>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"65\">This header is no longer a leaky abstraction as the user is no longer required to have a copy of <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"65\">d3d11.h</code>.</p>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"67\">Forward declarations can be made for:</p>\n<ul sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"69\">\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"69\">Class or struct members if they are pointers or references.</li>\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"70\">All types used as arguments to functions.</li>\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"71\">Template arguments if the usage follows the two above rules.</li>\n</ul>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"73\">Forward declarations can't be made for:</p>\n<ul sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"75\">\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"75\">Class or struct members that are 'inline' because the compiler needs to know the size and alignment.</li>\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"76\">Base classes.</li>\n</ul>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"78\">Enums can be forward declared if they are given an explicit storage type. So ideally to make enums forward declarable always manually specify a storage type.</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"80\">enum MyEnum : int; // Forward declaration\n\nenum MyEnum : int // declaration\n{\n    One,\n    Two\n};\n</code></pre>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"90\">Nested types can never be forward declared. A nested type is a type that is inside a class or struct.</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"92\">// does not work\n// struct Outer::Inner;\n\nstruct Outer\n{\n    struct Inner\n    {\n        int i;\n    };\n};\n</code></pre>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"105\">So prefer to put nested types into namespaces instead of structs or classes:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"107\">// Forward declaration\nnamespace Outer\n{\n    struct Inner;\n}\n\n// Declaration\nnamespace Outer\n{\n    struct Inner\n    {\n        int i;\n    };\n}\n</code></pre>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"124\">Templates can also be forward declared:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"126\">\n// forward declaration\ntemplate&lt;typename&gt; struct Example;\n\n// Usage of forward declaration\nvoid bar(const Example&lt;int&gt;&amp; arg);\n\n// declaration\ntemplate&lt;typename T&gt;\nstruct Example\n{\n    T t;\n};\n</code></pre>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"142\"><strong sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"142\">Advantages:</strong></p>\n<ul sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"144\">\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"144\">No runtime overhead</li>\n</ul>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"146\"><strong sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"146\">Disadvantages:</strong></p>\n<ul sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"148\">\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"148\">Forward declarations and actual declaration have to be kept in sync.</li>\n</ul>\n<h3 id=\"moving-implementation-details-out-of-templates\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"150\">Moving Implementation Details Out Of Templates</h3>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"152\">Consider the following example which leaks implementation details:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"154\">// Application.h\n\n#include &lt;roapi.h&gt;\n\ntemplate &lt;typename AppClass&gt;\nvoid RunApplication(AppClass&amp; app)\n{\n    RoInitialize(RO_INIT_MULTITHREADED);\n\n    app.Init();\n\n    while(!app.Run()) {}\n\n    app.DeInit();\n\n    RoUninitialize();\n}\n</code></pre>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"174\">The two functions <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"174\">RoInitialize</code> and <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"174\">RoUninitialize</code> are platform specific functions and require the include <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"174\">roapi.h</code>. We can't move the function into a .cpp because the implementation for templates needs to be known when using them. As a result this template leaks its implementation detail.</p>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"176\">To fix this issue we need to wrap the leaking function calls into separate functions and forward declare these functions.</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"178\">// Application.h\n\nvoid InitPlatform();\nvoid DeInitPlatform();\n\ntemplate &lt;typename AppClass&gt;\nvoid RunApplication(AppClass&amp; app)\n{\n    InitPlatform();\n\n    app.Init();\n\n    while(!app.Run()) {}\n\n    app.DeInit();\n\n    DeInitPlatform();\n}\n</code></pre>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"199\">// Application.cpp\n#include &quot;Application.h&quot;\n#include &lt;roapi.h&gt;\n\nvoid InitPlatform()\n{\n    RoInitialize(RO_INIT_MULTITHREADED);\n}\n\nvoid DeInitPlatform()\n{\n    RoUninitialize();\n}\n</code></pre>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"215\">As you can see we removed the include to <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"215\">roapi.h</code> from the header file and moved it into the cpp file. This way our header no longer leaks underlying implementation details, as the user won't see the cpp file when using our library. If considerable parts of the template don't depend on the template arguments this pattern can also be used to reduce code bloat by moving the non dependent parts out into non-templated functions.</p>\n<h3 id=\"pimpl-light\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"217\">Pimpl Light</h3>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"219\">The pattern that I call &quot;Pimpl light&quot; can be used to hide implementation detail at the cost of an additional allocation:</p>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"221\">Consider our original <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"221\">ezTexture2D</code> example it would be modified like this:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"223\">// Texture2D.h\nclass ezTexture2D\n{\npublic:\n    ezTexture2D();\n    ~ezTexture2D();\n    void Bind();\n\nprivate:\n    struct Impl; // forward declaration\n\n    ezUniquePtr&lt;Impl&gt; m_pImpl;\n};\n</code></pre>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"239\">// Texture2D.cpp\n#include &quot;Texture2D.h&quot;\n#include &lt;d3d11.h&gt;\n\n// Declaration of ezTexture2D::Impl struct\nstruct ezTexture2D::Impl\n{\n    ID3D11Texture2D* m_ptr;\n};\n\nezTexture2D::ezTexture2D()\n: m_pImpl(EZ_DEFAULT_NEW(Impl))\n{\n\n}\n\n// all constructors / destructors / assignment operators must be in .cpp file otherwise forward declaration will not work.\nezTexture2D::~ezTexture2D()\n{\n\n}\n\nezTexture2D::Bind()\n{\n    // Use the implementation detail\n    m_pImpl-&gt;m_ptr-&gt;Bind();\n}\n</code></pre>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"269\">This is an easy pattern to hide implementation details.</p>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"271\"><strong sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"271\">Advantages:</strong></p>\n<ul sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"273\">\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"273\">Simple to implement, hides nasty implementation details well</li>\n</ul>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"275\"><strong sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"275\">Disadvantages:</strong></p>\n<ul sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"277\">\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"277\">Additional allocation</li>\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"278\">Additional indirection</li>\n</ul>\n<h3 id=\"pimpl-inheritance\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"280\">Pimpl Inheritance</h3>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"282\">The Pimpl pattern can also be implemented by using inheritance instead of a forward declared struct. For our <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"282\">ezTexture2D</code> example it would look like this:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"284\">// Texture2D.h\nclass ezTexture2D\n{\npublic:\n    ezUniquePtr&lt;ezTexture2D&gt; Make(); // factory function, could also return a shared ptr.\n    virtual ~ezTexture2D();\n    void Bind();\n\nprivate:\n    ezTexture2D(); // All constructors must be private\n\n    friend class ezTexture2DImpl; // This is the only class allowed to derive from ezTexture2D\n};\n</code></pre>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"300\">// Texture2D.cpp\n#include &quot;Texture2D.h&quot;\n#include &lt;d3d11.h&gt;\n\n// Actual implementation\nclass ezTexture2DImpl : public ezTexture2D\n{\npublic:\n    ezTexture2DImpl() : ezTexture2D() {}\n    ~ezTexture2DImpl(){}\n\n    ID3D11Texture2D* m_ptr;\n};\n\n\nezTexture2D::ezTexture2D() {}\nezTexture2D::~ezTexture2D() {}\n\nezUniquePtr&lt;ezTexture2D&gt; ezTexture2D::Make()\n{\n    return ezUniquePtr&lt;ezTexture2D&gt;(EZ_DEFAULT_NEW(ezTexture2DImpl));\n}\n\nezTexture2D::Bind()\n{\n    // Use the implementation detail\n    reinterpret_cast&lt;ezTexture2DImpl*&gt;(this)-&gt;m_ptr-&gt;Bind();\n}\n</code></pre>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"331\">As you see this version of pimpl hides the implementation detail similar to pimpl light.</p>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"333\"><strong sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"333\">Advantages:</strong></p>\n<ul sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"335\">\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"335\">No additional indirection (compared to pimpl light)</li>\n</ul>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"337\"><strong sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"337\">Disadvantages:</strong></p>\n<ul sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"339\">\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"339\">Additional allocation</li>\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"340\">Can no longer inherit from <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"340\">ezTexture2D</code></li>\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"341\"><code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"341\">ezTexture2D</code> can't be <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"341\">final</code></li>\n</ul>\n<h3 id=\"opaque-array-of-bytes\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"343\">Opaque array of bytes</h3>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"345\">We can also place an opaque array of bytes large enough to store our implementation detail. Considering our <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"345\">ezTexture2D</code> example it would look like this:</p>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"347\">// ezTexture2D.h\n\nclass ezTexture2D\n{\npublic:\n    void Bind();\n\nprivate:\n#if EZ_ENABLED(EZ_PLATFORM_32BIT)\n    struct EZ_ALIGN(Impl, 4)\n    {\n        ezUInt8 m_Data[4];\n    };\n#else\n    struct EZ_ALIGN(Impl, 8)\n    {\n        ezUInt8 m_Data[8];\n    };\n#endif\n    Impl m_impl;\n};\n</code></pre>\n<pre><code class=\"lang-cpp\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"371\">// ezTexture2D.cpp\n#include &quot;Texture2D.h&quot;\n\nstruct ezTexture2DImpl\n{\n    D3D11Texture2D* m_ptr;\n};\n\nstatic_assert(sizeof(ezTexture2D::Impl) == sizeof(ezTexture2DImpl), &quot;ezTexture2D::Impl has incorrect size&quot;);\nstatic_assert(alignof(ezTexture2D::Impl) == alignof(ezTexture2DImpl), &quot;ezTexture2D::Impl has incorrect alignment&quot;);\n\nvoid ezTexture2D::Bind()\n{\n    // Use implementation detail\n    reinterpret_cast&lt;ezTexture2DImpl*&gt;(&amp;m_impl)-&gt;m_ptr-&gt;Bind();\n}\n</code></pre>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"390\">This again hides the implementation details in the header file.</p>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"392\"><strong sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"392\">Advantages:</strong></p>\n<ul sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"394\">\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"394\">No runtime overhead</li>\n</ul>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"396\"><strong sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"396\">Disadvantages:</strong></p>\n<ul sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"398\">\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"398\">High maintenance burden. Especially if implementation detail size varies on different platforms.</li>\n</ul>\n<h3 id=\"ignore-the-problem\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"400\">Ignore the problem</h3>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"402\">You can choose to ignore the leaky abstraction issue and tell the header checker tool to ignore a certain file to be included or give a certain file the permission to include anything.</p>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"404\">Each module in ezEngine that uses the header checker has a headerCheckerIgnore.json file where you can add ignores. It looks like this:</p>\n<pre><code class=\"lang-json\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"406\">{\n    &quot;includeTarget&quot; :\n    {\n        &quot;byName&quot; : [\n            &quot;a.h&quot;\n        ]\n    },\n    &quot;includeSource&quot; :\n    {\n        &quot;byName&quot; : [\n            &quot;b.h&quot;\n            ]\n    }\n}\n</code></pre>\n<ul sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"423\">\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"423\">In the above file every time <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"423\">a.h</code> is included and would generate an error in the header checker tool, that error will be ignored.</li>\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"424\">Every time <code sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"424\">b.h</code> includes a header file that would cause an error, this error will also be ignored.</li>\n</ul>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"426\"><strong sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"426\">Advantages:</strong></p>\n<ul sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"428\">\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"428\">Less work</li>\n</ul>\n<p sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"430\"><strong sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"430\">Disadvantages:</strong></p>\n<ul sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"432\">\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"432\">Longer compile times</li>\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"433\">Conflicts due to global namespace pollution</li>\n<li sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"434\">Requires users to have all header files for implementation details available</li>\n</ul>\n<h2 id=\"see-also\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"436\">See Also</h2>\n",
  "type": "Conceptual",
  "source": {
    "remote": {
      "path": "pages/docs/tools/headercheck.md",
      "branch": "main",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0.0,
    "endLine": 0.0
  },
  "path": "pages/docs/tools/headercheck.md",
  "documentation": {
    "remote": {
      "path": "pages/docs/tools/headercheck.md",
      "branch": "main",
      "repo": "https://github.com/ezEngine/docs-src"
    },
    "startLine": 0.0,
    "endLine": 0.0
  },
  "_appFaviconPath": "assets/images/favicon.svg",
  "_appFooter": "Hello",
  "_appLogoPath": "assets/images/EZ-text.svg",
  "_appName": "ezEngine",
  "_appTitle": "ezEngine",
  "_enableGoogleAnalytics": true,
  "_enableNewTab": true,
  "_enableSearch": true,
  "_gitContribute": {
    "repo": "https://github.com/ezEngine/docs-src",
    "branch": "main"
  },
  "_systemKeys": [
    "conceptual",
    "type",
    "source",
    "path",
    "documentation",
    "title",
    "rawTitle",
    "wordCount"
  ],
  "rawTitle": "<h1 id=\"headercheck-tool\" sourcefile=\"pages/docs/tools/headercheck.md\" sourcestartlinenumber=\"1\">HeaderCheck Tool</h1>",
  "title": "HeaderCheck Tool",
  "wordCount": 1409.0,
  "_key": "pages/docs/tools/headercheck.md",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../../toc.html",
  "_path": "pages/docs/tools/headercheck.html",
  "_rel": "../../../",
  "_tocKey": "~/pages/docs/toc.md",
  "_tocPath": "pages/docs/toc.html",
  "_tocRel": "../toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  },
  "_disableToc": false,
  "docurl": "https://github.com/ezEngine/docs-src/blob/main/pages/docs/tools/headercheck.md/#L1"
}